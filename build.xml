<project name="fewi" default="deploy" basedir=".">

	<!--pull in values from the properties file -->
	<property file="build.properties" />
	<property environment="env"/>
	<property name="test.dir" location="test" />
	<property name="unittestoutput.dir" location="unittest-results" />
	<property name="TALK" value="false" />

	<!--libs -->
	<path id="libs">
		<fileset includes="*.jar" dir="${lib.dir}" />
		<fileset includes="fedatamodel.jar" dir="${fedatamodel.dir}" />
		<fileset includes="snpdatamodel.jar" dir="${snpdatamodel.dir}" />
		<fileset includes="fe.jar" dir="${lib_java_fe.dir}" />
	</path>
	
	<path id="tests.path">
		<fileset includes="*.jar" dir="${lib.dir}" excludes="javaee-api-5.jar"/>
		<fileset includes="fedatamodel.jar" dir="${fedatamodel.dir}" />
		<fileset includes="snpdatamodel.jar" dir="${snpdatamodel.dir}" />
		<fileset includes="fe.jar" dir="${lib_java_fe.dir}" />
		<pathelement location="${test.dir}" />
		<pathelement location="${compile.dir}" />
	</path>
	
	<target name="isServer" unless="config.file">
		<property name="config.file" value="fewi.properties.${env.SERVER_NAME}"/>
	</target>
	 
	<!-- Need to build ANTLR Lexers and Parsers for our search parsing -->
	<!-- Antlr3 is called here -->
	<target name="antlr">
		<java classname="org.antlr.Tool" fork="true" failonerror="true">
			<arg value="-verbose"/>
			<arg value="-o"/>
			<arg path="${src.dir}/org/jax/mgi/fewi/antlr/BooleanSearch"/>
			<arg path="${src.dir}/org/jax/mgi/fewi/antlr/BooleanSearch/SolrBooleanSearch.g"/>
			<classpath refid="libs" />
		</java>
	</target>
	
	<!--clean -->
	<target name="clean">
		<delete dir="${compile.dir}" />
		<delete file="${project.name}.war" />
        <delete dir="${testoutput.dir}"/>
	</target>


	<!--prepare -->
	<target name="prepare" depends="clean, isServer">
		<echo>Creating build directory</echo>
		<mkdir dir="${compile.dir}" />
		<copy file="${fedatamodel.dir}/fedatamodel.jar" todir="./www/WEB-INF/lib" overwrite="true" />
		<copy file="${snpdatamodel.dir}/snpdatamodel.jar" todir="./www/WEB-INF/lib" overwrite="true" />
		<copy file="${lib_java_fe.dir}/fe.jar" todir="./www/WEB-INF/lib" overwrite="true" />
		<copy todir="./www/WEB-INF/jsp/templates" overwrite="true">
			<fileset dir="${global_config.dir}" includes="*.html" />
		</copy>
		<copy file="${global_config.dir}/GlobalConfig.properties" todir="./www/WEB-INF/properties" overwrite="true" />
		<copy file="./www/WEB-INF/properties/ehcache.xml" todir="./www/WEB-INF/classes" overwrite="true" />
		<echo message="Use ${config.dir}\${config.file}" />
		<copy file="${config.dir}/${config.file}" tofile="./www/WEB-INF/properties/fewi.properties" overwrite="false" />
		<copy file="${config.dir}/${web_xml.file}" tofile="./www/WEB-INF/web.xml" overwrite="false" />
	</target>


	<!--compile -->
	<target name="compile" depends="prepare, antlr">
		<echo>Compile source</echo>
		<javac destdir="${compile.dir}" debug="on" debuglevel="lines,vars,source" includeantruntime="false">
			<src path="${src.dir}" />
			<exclude name="org/jax/mgi/fewi/test/**" />
			<classpath refid="libs" />
		</javac>
	</target>

	
	<!-- Index test - copies the index html files to test output -->
	<target name="index-test">
        <mkdir dir="${testoutput.dir}"/>
		<copy todir="${testoutput.dir}" overwrite="true">
		  <fileset dir="${test.dir}">
		    <include name="**/*.html"/>
		  	<include name="**/*.css"/>
		  </fileset>
		</copy>
	</target>
		  	
	<!-- Compile tests -->
	<target name="compile-test" depends="unittest,index-test">
		<copy file="./www/WEB-INF/properties/applicationContext-ci.xml" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/common.fewi.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/common.solr.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/common.es.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/fewi.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/GlobalConfig.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/externalUrls.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy todir="${compile.dir}" overwrite="true">
			<fileset dir="${test.dir}">
				<include name="**/*.html"/>
			</fileset>
		</copy>
		<javac srcdir="${test.dir}" destdir="${compile.dir}" verbose="${TALK}">
			<classpath refid="tests.path" />
		</javac>
	</target>

    <!-- run tests -->
	<target name="test" depends="compile-test">
		<junit fork="yes" forkmode="once" failureproperty="junit.failure">
			<jvmarg value="-Dconcordion.output.dir=${testoutput.dir}"/>
			<classpath>
				<path refid="tests.path" />
			</classpath>
			<formatter type="xml" usefile="true" />
			<batchtest todir="${testoutput.dir}">
				<fileset dir="${compile.dir}" includes="**/*Test.class">
					<exclude name="**/FooTest.class" />
					<exclude name="**/BaseConcordionTest.class" />
					<exclude name="**/ContextLoaderTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	<!-- run gxd/snp/cre tests -->
	<target name="all-test" depends="compile-test">
					<junit fork="yes" forkmode="once" failureproperty="junit.failure">
						<jvmarg value="-Dconcordion.output.dir=${testoutput.dir}"/>
						<classpath>
							<path refid="tests.path" />
						</classpath>
						<formatter type="xml" usefile="true" />
						<batchtest todir="${testoutput.dir}">
							<fileset dir="${compile.dir}">
								<include name="indexTest.class" />
								<!--<include name="gxd/*Test.class" />
								<include name="allele/*Test.class" />
								<include name="cre/*Test.class" />
								<include name="snp/*Test.class" />
								<include name="misc/*Test.class" />-->
							</fileset>
						</batchtest>
					</junit>
				</target>
	<!-- run just HMDC tests -->
		<target name="hmdc-test" depends="compile-test">
				<junit fork="yes" forkmode="once" failureproperty="junit.failure">
					<jvmarg value="-Dconcordion.output.dir=${testoutput.dir}"/>
					<classpath>
						<path refid="tests.path" />
					</classpath>
					<formatter type="xml" usefile="true" />
					<batchtest todir="${testoutput.dir}">
						<fileset dir="${compile.dir}" includes="diseasePortal/*Test.class">
						</fileset>
					</batchtest>
				</junit>
			</target>
	
	<!-- run just allele tests -->
		<target name="allele-test" depends="compile-test">
				<junit fork="yes" forkmode="once" failureproperty="junit.failure">
					<jvmarg value="-Dconcordion.output.dir=${testoutput.dir}"/>
					<classpath>
						<path refid="tests.path" />
					</classpath>
					<formatter type="xml" usefile="true" />
					<batchtest todir="${testoutput.dir}">
						<fileset dir="${compile.dir}" includes="allele/*Test.class">
						</fileset>
					</batchtest>
				</junit>
			</target>
	
	<target name="homology-test" depends="compile-test">
			<junit fork="yes" forkmode="once" failureproperty="junit.failure">
				<jvmarg value="-Dconcordion.output.dir=${testoutput.dir}"/>
				<classpath>
					<path refid="tests.path" />
				</classpath>
				<formatter type="xml" usefile="true" />
				<batchtest todir="${testoutput.dir}">
					<fileset dir="${compile.dir}" includes="homology/*Test.class">
					</fileset>
				</batchtest>
			</junit>
		</target>

	
	<target name="unittest" depends="compile">
		<echo>Running unit tests, output should be in ${unittestoutput.dir}</echo>
		<mkdir dir="${unittestoutput.dir}"/>
		<junit fork="yes" forkmode="once" failureproperty="junit.failure" 
		printsummary="yes" >
			<classpath>
				<path refid="tests.path" />
			</classpath>
			<formatter type="xml" usefile="true" />
			<batchtest todir="${unittestoutput.dir}">
				<fileset dir="${compile.dir}" includes="unittest/fewi/**/*Test.class">
				</fileset>
			</batchtest>
		</junit>
		<fail message="Test failure detected, check test results." if="junit.failure" />
	</target>
	
	<!-- Copies JS files to build directory, minifies if js.minify is set -->
	<target name="static-content-package">
		<!-- Copy JS files into build directory -->
		<copy todir="www/js" overwrite="true">
			  <fileset dir="www/js/src">
			    <include name="**/*.js"/>
			  </fileset>
		</copy>
		<antcall target="static-content-minify" />
	</target>
	
	<!-- minimize all static *.js content -->
	<target name="static-content-minify" if="js.minify">
		<echo>Minifying JS files. Unset prop js.minify to disable minification.</echo>
	    <taskdef name="yuicompressor"
	             classname="com.metrosix.yuicompressor.anttask.YuiCompressorTask">
	    	<classpath refid="libs" />
	    </taskdef>

	    <yuicompressor todir="www/js" charset="utf-8" 
	        preserveallsemicolons="true" munge="true" >
	        <fileset dir="www/js/src">
	            <include name="**/*.js"/>
	        </fileset>
	    </yuicompressor>
	</target>
	
	<!-- Clean static content -->
	<target name="static-content-cleanup">
		<echo>Deleting javascript build files</echo>
		<delete includeemptydirs="true">
			<fileset dir="www/js/">
				<include name="**/*"/>
				<exclude name="src/**/*"/>
				<exclude name="external/**/*"/>
				<exclude name="tests/**/*"/>
			</fileset>
		</delete>
		<delete dir="www/js/widgets" />
	</target>
	
	
	<!--war -->
	<target name="war" depends="unittest,static-content-package">
		<echo>Build war file</echo>
		<copy file="./www/WEB-INF/properties/excelviews.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<copy file="./www/WEB-INF/properties/textviews.properties" todir="./www/WEB-INF/classes" overwrite="true" />
		<delete file="${war.file}"/>
		<delete dir="${war.file}"/>
		
		<war destfile="${war.file}" webxml="www/WEB-INF/web.xml">
			<fileset dir="www" excludes="js/src/**,js/tests/**,hmdc/assets/**" />
		</war>
		
		<!-- Clear minified js build files -->
		<antcall target="static-content-cleanup"/>
	</target>
	

	<!--deploy -->
	<target name="deploy" depends="war">
		<echo>Deploy war</echo>
		
		<!-- Remove existing war (which could be file or directory) -->
		<delete dir="${deploy.dir}/${war.file}" />
		
		<move file="${war.file}" todir="/Users/olinblodgett/git/wildfly-25.0.1.Final/standalone/deployments" overwrite="true" />
	</target>
	
	<!-- For development ONLY -->
	<property name="war.file" value="${project.name}.war" />
	<property name="war.file.temp" value="${project.name}_temp.war" />
	
	<!--deploy-exploded -->
	<target name="deploy-exploded" depends="war">
		<move file="${war.file}" tofile="${war.file.temp}" overwrite="true" />
		<unzip src="${war.file.temp}" dest="${war.file}"/>
		
		<!-- Remove existing war (which could be file or directory) -->
		<delete file="${deploy.dir}/${war.file}" />
		<delete dir="${deploy.dir}/${war.file}" />
		
		<copy todir="${deploy.dir}/${war.file}" overwrite="true">
			<fileset dir="${war.file}"/>
		</copy>
		<touch file="${deploy.dir}/${war.file}.dodeploy"/>
	</target>
	
	<!-- copy over the www files for development to deployment directory -->
	<target name="dev-copy-files">
		<antcall target="dev-copy-css"/>
		<antcall target="dev-copy-images"/>
		<antcall target="dev-copy-js"/>
		<antcall target="dev-copy-jsp"/>
	</target>
	
	<target name="dev-copy-css">
		<echo>Copying to ${deploy.dir}/${war.file}</echo>
		<copy todir="${deploy.dir}/${war.file}" >
			<fileset dir="www" >
				<include name="css/**"/>
			</fileset>
		</copy>
	</target>
	<target name="dev-copy-images">
		<echo>Copying to ${deploy.dir}/${war.file}</echo>
		<copy todir="${deploy.dir}/${war.file}" >
			<fileset dir="www" >
				<include name="images/**"/>
			</fileset>
		</copy>
	</target>
	<target name="dev-copy-js">
		<echo>Copying to ${deploy.dir}/${war.file}</echo>
		<antcall target="static-content-package"/>
		<copy todir="${deploy.dir}/${war.file}" >
			<fileset dir="www" >
				<include name="js/**"/>
				<include name="hmdc/**"/>
				<exclude name="js/src/**"/>
				<exclude name="js/tests/**"/>
			</fileset>
		</copy>
		<antcall target="static-content-cleanup"/>
	</target>
	<target name="dev-copy-jsp">
		<echo>Copying to ${deploy.dir}/${war.file}</echo>
		<copy todir="${deploy.dir}/${war.file}" >
			<fileset dir="www" >
				<include name="WEB-INF/jsp/**"/>
				<include name="WEB-INF/tags/**"/>
			</fileset>
		</copy>
	</target>
</project>
