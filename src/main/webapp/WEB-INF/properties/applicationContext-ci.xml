<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
		xmlns:util="http://www.springframework.org/schema/util"
		xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- ===================== RESOURCE DEFINITIONS ===================== -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder 
		location="classpath*:**/fewi.properties,
			classpath*:**/common.solr.properties,
			classpath*:**/common.fewi.properties,
			classpath*:**/common.es.properties" 
	/>

	<bean id="configBean" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:**/GlobalConfig.properties</value>
				<value>classpath*:**/fewi.properties</value>
				<value>classpath*:**/common.solr.properties</value>
				<value>classpath*:**/common.es.properties</value>
				<value>classpath*:**/common.fewi.properties</value>
			</list>
		</property>
	</bean>
	<bean id="externalUrls" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:externalUrls.properties</value>
			</list>
		</property>
	</bean>

	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="2" />
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
		<property name="exposedContextBeanNames">
			<list>
				<value>externalUrls</value>
				<value>configBean</value>
			</list>
		</property>
	</bean>

	<!-- JDBC DataSource for local environments -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource" destroy-method="destroy">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url" value="jdbc:postgresql://mgi-testdb3.jax.org:5432/fe_dev"/>
		<property name="username" value="mgd_public"/>
		<property name="password" value="mgdpub"/>
		<property name="suppressClose" value="true"/>
	</bean>
	
	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" 
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.type">${hibernate.type}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- <prop key="hibernate.cache.region.provider_class">
					net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory
				</prop> --> 
				<!-- <prop key="hibernate.cache.provider_class">
					org.hibernate.cache.EhCacheProvider
				</prop> -->	 
				<prop key="hibernate.cache.region.factory_class">
					org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>org.jax.mgi.fe.datamodel</value>
			</list>
		</property>
	</bean>
	
	<bean id="transactionManager" 
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory"/>

	<!-- 
	In a non-container environment (such as a test case) we need
	to wire up the servlet context and inject it to the contextloader
	manually
	-->
	<bean id="sc" class="org.springframework.mock.web.MockServletContext"/>
	<bean id="contextLoader" class="org.jax.mgi.fewi.config.ContextLoader">
		<property name="servletContext" ref="sc"/>
	</bean>
	<bean id="request" class="org.springframework.mock.web.MockHttpServletRequest" />
	<bean id="response" class="org.springframework.mock.web.MockHttpServletResponse" />

	<!--
	Activates various annotations to be detected in bean classes:
	Spring's @Required and @Autowired, as well as JSR 250's @Resource.
	-->
	<context:component-scan base-package="org.jax.mgi.fewi.hmdc.controller" />
	<context:component-scan base-package="org.jax.mgi.fewi.hmdc.finder" />
	<context:component-scan base-package="org.jax.mgi.fewi.hmdc.hunter" />
	<context:component-scan base-package="org.jax.mgi.fewi.controller" />
	<context:component-scan base-package="org.jax.mgi.fewi.handler" />
	<context:component-scan base-package="org.jax.mgi.fewi.matrix" />
	<context:component-scan base-package="org.jax.mgi.fewi.finder" />
	<context:component-scan base-package="org.jax.mgi.fewi.hunter" />
    <context:component-scan base-package="org.jax.mgi.fewi.hmdc.controller" />
    <context:component-scan base-package="org.jax.mgi.fewi.hmdc.finder" />
    <context:component-scan base-package="org.jax.mgi.fewi.hmdc.hunter" />
	<context:component-scan base-package="org.jax.mgi.fewi.template" />
	<context:component-scan base-package="org.jax.mgi.fewi.config" />
	<context:component-scan base-package="org.jax.mgi.fewi.objectGatherer" />
	<context:component-scan base-package="org.jax.mgi.fewi.util" />
	<context:annotation-config/>
	<mvc:annotation-driven />

</beans>
